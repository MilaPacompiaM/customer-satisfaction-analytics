name: CI/CD Pipeline - Customer Satisfaction Analytics

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar tests diariamente a las 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.9'
  AWS_DEFAULT_REGION: us-east-1
  
jobs:
  # ===== STAGE 1: CODE QUALITY =====
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort safety bandit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: 🎨 Check Code Formatting (Black)
      run: |
        black --check --diff .
    
    - name: 📏 Check Import Sorting (isort)
      run: |
        isort --check-only --diff .
    
    - name: 🔍 Lint Code (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: 🛡️ Security Scan (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: 🔒 Check Dependencies (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check
  
  # ===== STAGE 2: UNIT TESTS =====
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        pip install -r requirements.txt
    
    - name: 🧪 Run Unit Tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
  
  # ===== STAGE 3: DATA QUALITY TESTS =====
  data-quality:
    name: 📊 Data Quality Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🎲 Generate Test Data
      run: |
        python ingestion/scripts/data_simulator.py \
          --tickets 1000 \
          --nps 500 \
          --reviews 300 \
          --transcripts 100 \
          --output data/simulated
    
    - name: 🔍 Validate Data Quality
      run: |
        python tests/data_quality_tests.py
    
    - name: 📈 Test NLP Analysis
      run: |
        python analytics/nlp_models/sentiment_analyzer.py
  
  # ===== STAGE 4: TERRAFORM VALIDATION =====
  terraform-validate:
    name: 🏗️ Terraform Validation
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: 🔍 Terraform Format Check
      run: |
        cd infra/terraform
        terraform fmt -check=true -diff=true
    
    - name: ⚙️ Terraform Init
      run: |
        cd infra/terraform
        terraform init -backend=false
    
    - name: ✅ Terraform Validate
      run: |
        cd infra/terraform
        terraform validate
    
    - name: 📋 Terraform Plan (Dry Run)
      run: |
        cd infra/terraform
        terraform plan -var="environment=ci" -out=tfplan
      env:
        TF_VAR_aws_region: ${{ env.AWS_DEFAULT_REGION }}
        TF_VAR_project_name: customer-satisfaction-analytics-ci
  
  # ===== STAGE 5: INTEGRATION TESTS =====
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, data-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,glue,athena
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install awscli-local
    
    - name: ⏳ Wait for LocalStack
      run: |
        sleep 10
        curl -s http://localhost:4566/_localstack/health
    
    - name: 🪣 Setup Test S3 Bucket
      run: |
        awslocal s3 mb s3://test-customer-satisfaction-bucket
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
    
    - name: 🎲 Generate and Upload Test Data
      run: |
        python ingestion/scripts/data_simulator.py --output data/simulated
        python ingestion/scripts/s3_uploader.py \
          --bucket test-customer-satisfaction-bucket \
          --data-dir data/simulated
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_ENDPOINT_URL: http://localhost:4566
    
    - name: 🧪 Run Integration Tests
      run: |
        pytest tests/integration_tests/ -v
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_ENDPOINT_URL: http://localhost:4566
  
  # ===== STAGE 6: SECURITY SCAN =====
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
  
  # ===== STAGE 7: BUILD & PACKAGE =====
  build:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, terraform-validate]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: 🏗️ Build Package
      run: |
        python -m build
    
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        retention-days: 30
  
  # ===== STAGE 8: DEPLOY TO DEV =====
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: 🚀 Deploy Infrastructure
      run: |
        cd infra/terraform
        terraform init
        terraform plan -var="environment=dev" -out=tfplan
        terraform apply tfplan
      env:
        TF_VAR_project_name: customer-satisfaction-analytics
        TF_VAR_environment: dev
    
    - name: 📤 Upload Sample Data
      run: |
        python ingestion/scripts/data_simulator.py --output data/simulated
        BUCKET_NAME=$(terraform -chdir=infra/terraform output -raw data_lake_bucket_name)
        python ingestion/scripts/s3_uploader.py \
          --bucket $BUCKET_NAME \
          --data-dir data/simulated \
          --setup-structure \
          --create-glue-tables
  
  # ===== STAGE 9: DEPLOY TO PRODUCTION =====
  deploy-prod:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: 🚀 Deploy Infrastructure
      run: |
        cd infra/terraform
        terraform init
        terraform plan -var="environment=prod" -out=tfplan
        terraform apply tfplan
      env:
        TF_VAR_project_name: customer-satisfaction-analytics
        TF_VAR_environment: prod
    
    - name: 🏷️ Create Release Tag
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$(date +'%Y.%m.%d')-${GITHUB_SHA::7}" -m "Production deployment $(date +'%Y-%m-%d %H:%M:%S')"
        git push origin --tags
  
  # ===== STAGE 10: NOTIFICATION =====
  notification:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: 📧 Send Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#customer-analytics'
        text: |
          🎯 *Customer Satisfaction Analytics Pipeline*
          
          *Status:* ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.sha }}
          *Author:* ${{ github.actor }}
          
          *Pipeline Results:*
          • Code Quality: ${{ needs.code-quality.result }}
          • Unit Tests: ${{ needs.unit-tests.result }}
          • Integration Tests: ${{ needs.integration-tests.result }}
          • Security Scan: ${{ needs.security-scan.result }}
          • Deploy Dev: ${{ needs.deploy-dev.result }}
          • Deploy Prod: ${{ needs.deploy-prod.result }}
          
          <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Pipeline>
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != null
  
  # ===== MAINTENANCE JOBS =====
  cleanup:
    name: 🧹 Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🗑️ Delete Old Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 5 